from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.preprocessing import scale

import time
import datetime as dt

import mnist_demo as m
import numpy as np

def main():
    x_train, y_train = m.read_mnist('MNIST_data/train-images-idx3-ubyte.gz',
                                    'MNIST_data/train-labels-idx1-ubyte.gz')
    X_train = x_train.reshape(-1, 28*28).astype(np.float32)
    X_train = X_train * (2.0/255.0) - 1.0
    x_test, y_test = m.read_mnist('MNIST_data/t10k-images-idx3-ubyte.gz',
                                  'MNIST_data/t10k-labels-idx1-ubyte.gz')
    X_test = x_test.reshape(-1, 28*28).astype(np.float32)
    X_test = X_test * (2.0/255.0) - 1.0

"""    
    print "Analyzing..."
    X_train = PCA(n_components=50).fit_transform(X_train)
    X_test = PCA(n_components=50).fit_transform(X_test)
    print "Done analyzing." 
"""



    classif = OneVsRestClassifier(SVC(kernel='linear'))

    print "Started learning..."
    before1 = dt.datetime.now()
    classif.fit(X_train, y_train)
    after1 = dt.datetime.now()
    print "Done learning!"
    beforeA = dt.datetime.now()
    scoreA = classif.score(X_test, y_test)
    afterA = dt.datetime.now()
    print "Training accuracy: ", scoreA
    print "Time it took to train once: ", after1 - before1
    print "Time it took to verify: ", afterA - beforeA

    print "Learning again..."
    before2 = dt.datetime.now()
    classif.fit(X_train, y_train)
    after2 = dt.datetime.now()
    print "Done learning!"
    beforeB = dt.datetime.now()
    scoreB = classif.score(X_test, y_test)
    afterB = dt.datetime.now()
    print "Training accuracy: ", scoreA
    print "Time it took to train once: ", after2 - before2
    print "Time it took to verify: ", afterB - beforeB

main()
